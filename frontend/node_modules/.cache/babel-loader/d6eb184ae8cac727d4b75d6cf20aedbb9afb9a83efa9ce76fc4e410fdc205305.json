{"ast":null,"code":"// frontend/src/utils/exportData.js\n\n/**\r\n * Utility to export data from Neurolytix frontend\r\n * Supports: JSON, CSV\r\n */\n\n/**\r\n * Export JSON data\r\n * @param {Object} data - The data to export\r\n * @param {string} filename - Filename without extension\r\n */\nexport function exportJSON(data, filename = \"export\") {\n  const jsonStr = JSON.stringify(data, null, 2);\n  const blob = new Blob([jsonStr], {\n    type: \"application/json\"\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = `${filename}.json`;\n  link.click();\n  URL.revokeObjectURL(url);\n}\n\n/**\r\n * Export CSV data\r\n * @param {Array} data - Array of objects (e.g., table rows)\r\n * @param {string} filename - Filename without extension\r\n */\nexport function exportCSV(data, filename = \"export\") {\n  if (!Array.isArray(data) || data.length === 0) {\n    console.error(\"Invalid data format for CSV export\");\n    return;\n  }\n\n  // Extract headers\n  const headers = Object.keys(data[0]);\n  const csvRows = [];\n\n  // Add header row\n  csvRows.push(headers.join(\",\"));\n\n  // Add data rows\n  for (const row of data) {\n    const values = headers.map(header => {\n      var _row$header;\n      return JSON.stringify((_row$header = row[header]) !== null && _row$header !== void 0 ? _row$header : \"\");\n    });\n    csvRows.push(values.join(\",\"));\n  }\n  const csvStr = csvRows.join(\"\\n\");\n  const blob = new Blob([csvStr], {\n    type: \"text/csv\"\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = `${filename}.csv`;\n  link.click();\n  URL.revokeObjectURL(url);\n}","map":{"version":3,"names":["exportJSON","data","filename","jsonStr","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","exportCSV","Array","isArray","length","console","error","headers","Object","keys","csvRows","push","join","row","values","map","header","_row$header","csvStr"],"sources":["C:/Users/HP/OneDrive - University of Derby/Desktop/Neurolytix/frontend/src/utils/exportData.js"],"sourcesContent":["// frontend/src/utils/exportData.js\r\n\r\n/**\r\n * Utility to export data from Neurolytix frontend\r\n * Supports: JSON, CSV\r\n */\r\n\r\n/**\r\n * Export JSON data\r\n * @param {Object} data - The data to export\r\n * @param {string} filename - Filename without extension\r\n */\r\nexport function exportJSON(data, filename = \"export\") {\r\n  const jsonStr = JSON.stringify(data, null, 2);\r\n  const blob = new Blob([jsonStr], { type: \"application/json\" });\r\n  const url = URL.createObjectURL(blob);\r\n\r\n  const link = document.createElement(\"a\");\r\n  link.href = url;\r\n  link.download = `${filename}.json`;\r\n  link.click();\r\n\r\n  URL.revokeObjectURL(url);\r\n}\r\n\r\n/**\r\n * Export CSV data\r\n * @param {Array} data - Array of objects (e.g., table rows)\r\n * @param {string} filename - Filename without extension\r\n */\r\nexport function exportCSV(data, filename = \"export\") {\r\n  if (!Array.isArray(data) || data.length === 0) {\r\n    console.error(\"Invalid data format for CSV export\");\r\n    return;\r\n  }\r\n\r\n  // Extract headers\r\n  const headers = Object.keys(data[0]);\r\n  const csvRows = [];\r\n\r\n  // Add header row\r\n  csvRows.push(headers.join(\",\"));\r\n\r\n  // Add data rows\r\n  for (const row of data) {\r\n    const values = headers.map((header) => JSON.stringify(row[header] ?? \"\"));\r\n    csvRows.push(values.join(\",\"));\r\n  }\r\n\r\n  const csvStr = csvRows.join(\"\\n\");\r\n  const blob = new Blob([csvStr], { type: \"text/csv\" });\r\n  const url = URL.createObjectURL(blob);\r\n\r\n  const link = document.createElement(\"a\");\r\n  link.href = url;\r\n  link.download = `${filename}.csv`;\r\n  link.click();\r\n\r\n  URL.revokeObjectURL(url);\r\n}\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAUA,CAACC,IAAI,EAAEC,QAAQ,GAAG,QAAQ,EAAE;EACpD,MAAMC,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;EAC7C,MAAMK,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACJ,OAAO,CAAC,EAAE;IAAEK,IAAI,EAAE;EAAmB,CAAC,CAAC;EAC9D,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;EAErC,MAAMM,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxCF,IAAI,CAACG,IAAI,GAAGN,GAAG;EACfG,IAAI,CAACI,QAAQ,GAAG,GAAGd,QAAQ,OAAO;EAClCU,IAAI,CAACK,KAAK,CAAC,CAAC;EAEZP,GAAG,CAACQ,eAAe,CAACT,GAAG,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,SAASA,CAAClB,IAAI,EAAEC,QAAQ,GAAG,QAAQ,EAAE;EACnD,IAAI,CAACkB,KAAK,CAACC,OAAO,CAACpB,IAAI,CAAC,IAAIA,IAAI,CAACqB,MAAM,KAAK,CAAC,EAAE;IAC7CC,OAAO,CAACC,KAAK,CAAC,oCAAoC,CAAC;IACnD;EACF;;EAEA;EACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAAC1B,IAAI,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM2B,OAAO,GAAG,EAAE;;EAElB;EACAA,OAAO,CAACC,IAAI,CAACJ,OAAO,CAACK,IAAI,CAAC,GAAG,CAAC,CAAC;;EAE/B;EACA,KAAK,MAAMC,GAAG,IAAI9B,IAAI,EAAE;IACtB,MAAM+B,MAAM,GAAGP,OAAO,CAACQ,GAAG,CAAEC,MAAM;MAAA,IAAAC,WAAA;MAAA,OAAK/B,IAAI,CAACC,SAAS,EAAA8B,WAAA,GAACJ,GAAG,CAACG,MAAM,CAAC,cAAAC,WAAA,cAAAA,WAAA,GAAI,EAAE,CAAC;IAAA,EAAC;IACzEP,OAAO,CAACC,IAAI,CAACG,MAAM,CAACF,IAAI,CAAC,GAAG,CAAC,CAAC;EAChC;EAEA,MAAMM,MAAM,GAAGR,OAAO,CAACE,IAAI,CAAC,IAAI,CAAC;EACjC,MAAMxB,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC6B,MAAM,CAAC,EAAE;IAAE5B,IAAI,EAAE;EAAW,CAAC,CAAC;EACrD,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;EAErC,MAAMM,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxCF,IAAI,CAACG,IAAI,GAAGN,GAAG;EACfG,IAAI,CAACI,QAAQ,GAAG,GAAGd,QAAQ,MAAM;EACjCU,IAAI,CAACK,KAAK,CAAC,CAAC;EAEZP,GAAG,CAACQ,eAAe,CAACT,GAAG,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}